import re

from telebot.types import Message

from database.models import db
from database.CRUD import CRUDInterface
from database.models import Client
from loader import bot
from keyboards.client_request import markup
from keyboards.service_selection import keyboard
from states.user_request import UserRequest


contact = {'name': '', 'phone': ''}
db_write = CRUDInterface.create()

@bot.message_handler(commands=['services'])
def services(message: Message) -> None:
    bot.reply_to(message, '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram-–±–æ—Ç–æ–≤ –ø–æ–¥ –∫–ª—é—á:\n'
                          '‚Äì –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞—è–≤–æ–∫, —Ä–∞—Å—Å—ã–ª–æ–∫, FAQ, –∫–≤–∏–∑–æ–≤\n'
                          '‚Äì –í–æ—Ä–æ–Ω–∫–∏, —Ñ–æ—Ä–º—ã, CRM-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.\n\n'
                          '–°–æ–∑–¥–∞–Ω–∏–µ Mini Apps (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ Telegram):\n'
                          '‚Äì –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏, —Ñ–æ—Ä–º–∞–º–∏, –∫–∞—Ç–∞–ª–æ–≥–∞–º–∏\n'
                          '‚Äì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API, –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö, –ø–ª–∞—Ç—ë–∂–Ω—ã–º —Å–∏—Å—Ç–µ–º–∞–º\n\n'
                          '–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–æ–≤\n'
                          '‚Äì –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ—à–µ–Ω–∏–π\n'
                          '‚Äì –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π\n'
                          '‚Äì –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏\n\n'
                          '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n'
                          '‚Äì –ü–æ–º–æ–∂–µ–º —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –±–æ—Ç–∞ –æ—Ç –ê –¥–æ –Ø –ø–æ–¥ –≤–∞—à—É –∑–∞–¥–∞—á—É\n'
                          '‚Äì –û—Ü–µ–Ω–∏–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å, —Å—Ä–æ–∫–∏, –ø–æ–¥—Å–∫–∞–∂–µ–º –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏.\n\n'
                          '–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ üëá',
                 reply_markup = markup
    )

@bot.message_handler(func=lambda message: message.text == '–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É')
def name(message: Message) -> None:
    bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
    bot.set_state(message.from_user.id, UserRequest.phone, message.chat.id)


@bot.message_handler(state=UserRequest.phone)
def phone(message: Message) -> None:
    contact['name'] = message.text
    bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79990001122:')
    bot.set_state(message.from_user.id, UserRequest.service, message.chat.id)

@bot.message_handler(state=UserRequest.service)
def service(message: Message) -> None:
    pattern = r'^\+7\d{10}$'
    if not re.match(pattern, message.text):
        bot.send_message(message.from_user.id, '–í–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, –≤–≤–µ–¥–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ.')
    else:
        contact['phone'] = message.text
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —É—Å–ª—É–≥—É.', reply_markup=keyboard)


@bot.callback_query_handler(lambda call: call.data.startswith('service_'))
def data_storage(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    text = call.data
    service_name = text.split('_')[1]
    data = [
        {'id': call.from_user.id,
         'name': contact['name'],
         'phone': contact['phone'],
         'service': service_name

        }
    ]
    db_write(db, Client, data)

    bot.send_message(call.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –°–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')


